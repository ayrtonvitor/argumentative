// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: select.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getArgumentFromThesisId = `-- name: GetArgumentFromThesisId :many
SELECT
  argument.id,
  argument.creation_date,
  argument.last_update_time,
  argument.brief,
  argument.description,
  thesis_argument.thesis_id
FROM argument
JOIN thesis_argument
  ON argument.id = thesis_argument.argument_id
WHERE thesis_argument.thesis_id = ANY($1::UUID[])
`

type GetArgumentFromThesisIdRow struct {
	ID             uuid.UUID
	CreationDate   time.Time
	LastUpdateTime time.Time
	Brief          string
	Description    sql.NullString
	ThesisID       uuid.UUID
}

func (q *Queries) GetArgumentFromThesisId(ctx context.Context, ids []uuid.UUID) ([]GetArgumentFromThesisIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getArgumentFromThesisId, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArgumentFromThesisIdRow
	for rows.Next() {
		var i GetArgumentFromThesisIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreationDate,
			&i.LastUpdateTime,
			&i.Brief,
			&i.Description,
			&i.ThesisID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSourceFromArgumentId = `-- name: GetSourceFromArgumentId :many
SELECT
  id,
  creation_date,
  last_update_time,
  content,
  argument_id
FROM argumentSources
WHERE argument_id = ANY($1::UUID[])
`

func (q *Queries) GetSourceFromArgumentId(ctx context.Context, ids []uuid.UUID) ([]Argumentsource, error) {
	rows, err := q.db.QueryContext(ctx, getSourceFromArgumentId, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Argumentsource
	for rows.Next() {
		var i Argumentsource
		if err := rows.Scan(
			&i.ID,
			&i.CreationDate,
			&i.LastUpdateTime,
			&i.Content,
			&i.ArgumentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getThesisById = `-- name: GetThesisById :many
SELECT
  id,
  creation_date,
  last_update_time,
  title,
  description
FROM thesis
WHERE id = ANY($1::UUID[])
`

func (q *Queries) GetThesisById(ctx context.Context, ids []uuid.UUID) ([]Thesis, error) {
	rows, err := q.db.QueryContext(ctx, getThesisById, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thesis
	for rows.Next() {
		var i Thesis
		if err := rows.Scan(
			&i.ID,
			&i.CreationDate,
			&i.LastUpdateTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
