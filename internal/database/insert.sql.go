// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: insert.sql

package database

import (
	"context"
	"database/sql"
)

const createArgument = `-- name: CreateArgument :one
INSERT INTO argument (
  id,
  creation_date,
  last_update_time,
  brief,
  description
)
VALUES (
  gen_random_uuid(),
  NOW(),
  NOW(),
  $1,
  $2
) RETURNING id, creation_date, last_update_time, brief, description
`

type CreateArgumentParams struct {
	Brief       string
	Description sql.NullString
}

func (q *Queries) CreateArgument(ctx context.Context, arg CreateArgumentParams) (Argument, error) {
	row := q.db.QueryRowContext(ctx, createArgument, arg.Brief, arg.Description)
	var i Argument
	err := row.Scan(
		&i.ID,
		&i.CreationDate,
		&i.LastUpdateTime,
		&i.Brief,
		&i.Description,
	)
	return i, err
}

const createThesis = `-- name: CreateThesis :one
INSERT INTO thesis (
  id,
  creation_date,
  last_update_time,
  title,
  description
) VALUES (
  gen_random_uuid(),
  NOW(),
  NOW(),
  $1,
  $2
) RETURNING id, creation_date, last_update_time, title, description
`

type CreateThesisParams struct {
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateThesis(ctx context.Context, arg CreateThesisParams) (Thesis, error) {
	row := q.db.QueryRowContext(ctx, createThesis, arg.Title, arg.Description)
	var i Thesis
	err := row.Scan(
		&i.ID,
		&i.CreationDate,
		&i.LastUpdateTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}
